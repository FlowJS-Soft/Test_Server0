/// <reference types="node" />
import http, { IncomingMessage, ServerResponse } from 'http';
import WebSocket from 'ws';
import { ServerOptions as IServerOptions } from 'ws';
import { MatchMaker } from './MatchMaker';
import { RegisteredHandler } from './matchmaker/RegisteredHandler';
import { Presence } from './presence/Presence';
import { Transport } from './transport/Transport';
import { RoomConstructor } from './Room';
export declare type ServerOptions = IServerOptions & {
    pingTimeout?: number;
    pingCountMax?: number;
    verifyClient?: WebSocket.VerifyClientCallbackAsync;
    presence?: any;
    driver?: any;
    engine?: any;
    ws?: any;
    express?: any;
    gracefullyShutdown?: boolean;
};
export declare class Server {
    matchMaker: MatchMaker;
    transport: Transport;
    protected presence: Presence;
    protected processId: string;
    protected route: string;
    constructor(options?: ServerOptions);
    attach(options: ServerOptions): void;
    listen(port: number, hostname?: string, backlog?: number, listeningListener?: Function): void;
    registerProcessForDiscovery(transport: Transport): void;
    define(name: string, handler: RoomConstructor, defaultOptions?: any): RegisteredHandler;
    gracefullyShutdown(exit?: boolean): Promise<void>;
    onShutdown(callback: () => void | Promise<any>): void;
    protected onShutdownCallback: () => void | Promise<any>;
    protected attachMatchMakingRoutes(server: http.Server): void;
    protected handleMatchMakeRequest(req: IncomingMessage, res: ServerResponse): Promise<void>;
}
