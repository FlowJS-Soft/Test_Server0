import { RegisteredHandler } from './matchmaker/RegisteredHandler';
import { Room, RoomConstructor } from './Room';
import { Presence } from './presence/Presence';
import { MatchMakerDriver, RoomListingData } from './matchmaker/drivers/Driver';
export declare type ClientOptions = any;
export interface RoomWithScore {
    roomId: string;
    score: number;
}
export declare const REMOTE_ROOM_SHORT_TIMEOUT: number;
declare type RemoteRoomResponse<T = any> = [string?, T?];
export declare class MatchMaker {
    handlers: {
        [id: string]: RegisteredHandler;
    };
    exposedMethods: string[];
    allowedRoomNameChars: RegExp;
    private processId;
    private localRooms;
    private presence;
    private driver;
    private isGracefullyShuttingDown;
    constructor(presence?: Presence, driver?: MatchMakerDriver, processId?: string);
    joinOrCreate(roomName: string, options: ClientOptions): Promise<{
        room: RoomListingData;
        sessionId: string;
    }>;
    create(roomName: string, options: ClientOptions): Promise<{
        room: RoomListingData;
        sessionId: string;
    }>;
    join(roomName: string, options: ClientOptions): Promise<{
        room: RoomListingData;
        sessionId: string;
    }>;
    joinById(roomId: string, options: ClientOptions): Promise<{
        room: RoomListingData;
        sessionId: any;
    }>;
    query(roomName?: string, conditions?: any): Promise<RoomListingData[]>;
    queryRoom(roomName: string, options: ClientOptions): Promise<RoomListingData>;
    remoteRoomCall<R = any>(roomId: string, method: string, args?: any[], rejectionTimeout?: number): Promise<RemoteRoomResponse<R>>;
    defineRoomType(name: string, klass: RoomConstructor, defaultOptions?: any): RegisteredHandler;
    hasHandler(name: string): boolean;
    createRoom(roomName: string, clientOptions: ClientOptions): Promise<RoomListingData>;
    getRoomById(roomId: string): Room<any>;
    gracefullyShutdown(): Promise<any>;
    protected reserveSeatFor(room: RoomListingData, options: any): Promise<{
        room: RoomListingData;
        sessionId: string;
    }>;
    protected cleanupStaleRooms(roomName: string): Promise<void>;
    protected createRoomReferences(room: Room, init?: boolean): Promise<boolean>;
    protected clearRoomReferences(room: Room): void;
    protected awaitRoomAvailable(roomToJoin: string): Promise<unknown>;
    protected getRoomChannel(roomId: string): string;
    protected getHandlerConcurrencyKey(name: string): string;
    private onClientJoinRoom;
    private onClientLeaveRoom;
    private lockRoom;
    private unlockRoom;
    private disposeRoom;
}
export {};
